'''
MODELS

NOTES:
To create and commit changes, uncomment the last two lines.
'''

# Imports -----------------------------------------------------------------------

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

# Setup -------------------------------------------------------------------------

app = Flask(__name__) # create the application instance
app.config.from_object('config') # load configurations from config.py
db = SQLAlchemy(app) # use SQLAlchemy to build the app's db

# Models ------------------------------------------------------------------------

class Budget(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        year1 = db.Column(db.Integer)
        year2 = db.Column(db.Integer)
        category = db.Column(db.String(100))
        assigned_to = db.Column(db.String(100))
        comments = db.Column(db.String(1000))
        subcategory = db.Column(db.String(100))
        cost_type = db.Column(db.String(100))
        centre = db.Column(db.String(100))
        orig_proposal = db.Column(db.Integer)

        def __repr__(self):
                return '<Budget %r>' % self.budget


class Collaborators(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        name1 = db.Column(db.String(100))
        name2 = db.Column(db.String(100))
        title = db.Column(db.String(100))
        role_expertise = db.Column(db.String(1000))
        country = db.Column(db.String(100))
        type = db.Column(db.String(100))
        affiliation = db.Column(db.String(1000))
        email = db.Column(db.String(100))

        def __repr__(self):
                return '<Colaborators %r>' % self.colaborators


class Conferences(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        title = db.Column(db.String(1000))
        date = db.Column(db.String(100))
        location = db.Column(db.String(100))
        attendees = db.Column(db.String(1000))

        def __repr__(self):
                return '<Conferences %r>' % self.conferences


class Cost_Categories(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        code = db.Column(db.Integer)
        description = db.Column(db.String(100))

        def __repr__(self):
                return '<Cost_Categories %r>' % self.cost_categories


class Cost_Subcategories(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        description = db.Column(db.String(100))

        def __repr__(self):
                return '<Cost_Subcategories %r>' % self.cost_subcategories


class Links(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        category = db.Column(db.String(100))
        subcategory = db.Column(db.String(100))
        software = db.Column(db.String(100))
        description = db.Column(db.String(1000))
        link = db.Column(db.String(1000))

        def __repr__(self):
                return '<Links %r>' % self.links


class Milestones(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        milestone_id = db.Column(db.Integer,unique=True)
        short_title = db.Column(db.String(100))
        start_date = db.Column(db.Date) # Changed these two from strings
        end_date = db.Column(db.Date)   # to Dates Kody 2018-01-08
        module = db.Column(db.String(100))
        activity = db.Column(db.String(1000))
        milestone = db.Column(db.String(1000))
        assigned_to = db.Column(db.String(1000))
        progress = db.Column(db.String(1000))
	variance = db.Column(db.String(1000))

        def __repr__(self):
                return '<Milestones %r>' % self.milestones


class News(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        date = db.Column(db.DateTime, default=datetime.now())
        entry = db.Column(db.String(1000))

        def __repr__(self):
                return '<News %r>' % self.news


class Objectives(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        order = db.Column(db.Integer, unique=True)
        short = db.Column(db.String(100))
        description = db.Column(db.String(1000))
        outcome = db.Column(db.String(1000))

        def __repr__(self):
                return '<Objectives %r>' % self.objectives


class Participants(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        site = db.Column(db.String(100))
        name_id = db.Column(db.String(1000))
        cost_centre = db.Column(db.String(100))
        from_participant = db.Column(db.String(1))
        name1 = db.Column(db.String(100))
        name2 = db.Column(db.String(100))
        pi = db.Column(db.String(1))
        role = db.Column(db.String(100))
        responsibility = db.Column(db.String(1000))
        initials = db.Column(db.String(10))
        publishing_initials = db.Column(db.String(10))
        email = db.Column(db.String(100))
        contribution_percent = db.Column(db.Integer)

        def __repr__(self):
                return '<Participants %r>' % self.participants


class Publications(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        year = db.Column(db.String(100))
        title = db.Column(db.String(1000))
        citation = db.Column(db.String(1000))
        link = db.Column(db.String(1000))

        def __repr__(self):
                return '<Publications %r>' % self.publications


class RDC(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        centre = db.Column(db.String(100))
        director = db.Column(db.String(100))
        adrdt = db.Column(db.String(100))

        def __repr__(self):
                return '<RDC %r>' % self.rdc



class Support(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        name_id = db.Column(db.String(1000))
        name1 = db.Column(db.String(100))
        name2 = db.Column(db.String(100))
        site = db.Column(db.String(100))
        team = db.Column(db.String(100))
        role = db.Column(db.String(100))
        responsibility = db.Column(db.String(1000))
        contribution_percent = db.Column(db.Integer)
        email = db.Column(db.String(100))

        def __repr__(self):
                return '<Participants %r>' % self.participants



class Tools(db.Model):

        id = db.Column(db.Integer, primary_key=True)
        title = db.Column(db.String(100))
        category = db.Column(db.String(100))
        description = db.Column(db.String(1000))
        link = db.Column(db.String(1000))

        def __repr__(self):
                return '<Tools %r>' % self.tools

'''
db.create_all()
db.session.commit()
'''
